using Newtonsoft.Json.Linq;
using SocialNetwork.Blobs;
using SocialNetwork.Web.Helpers;
using SocialNetwork.Web.Models.Account;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;

namespace SocialNetwork.Web.Controllers
{
    public class AccountController : Controller
    {
        private HttpClient _client; //for consuming the Web API
        private TokenHelper _tokenHelper;

        public AccountController()
        {
            _client = new HttpClient();

            _client.BaseAddress = new Uri("https://localhost:44319"); //Web API address / SocialNetwork.API address
            _client.DefaultRequestHeaders.Accept.Clear();

            var mediaType = new MediaTypeWithQualityHeaderValue("application/json");
            _client.DefaultRequestHeaders.Accept.Add(mediaType);

            _tokenHelper = new TokenHelper();
        }

        // GET: Account
        public ActionResult Register()
        {
            return View();
        }

        //POST: /Account/Register
        //método que irá receber o Post com os dados que inserimos nessa página e que vai enviar esses dados para a nossa API
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Register(RegisterViewModel model)
        { /*
            if(ModelState.IsValid)
            {
                ServicePointManager.ServerCertificateValidationCallback =
                delegate (object s, X509Certificate certificate,
                X509Chain chain, SslPolicyErrors sslPolicyErrors)
                { return true; }; //gambiarra do SSL

                var response = await _client.PostAsJsonAsync("/API/Account/Register", model);

                if(response.IsSuccessStatusCode)
                {
                    //meter aqui um return pra alguma pagina
                    return View("Login");
                }
                else
                {
                    //aqui tbm
                }
            }
            return View(model);
            */
            if (!ModelState.IsValid)
            {
                return View();
            }

            //upload
            var blob = new AzureBlobs();
            var filePath = await blob.UploadFile(model.UploadPictureUrl);
            model.PictureUrl = filePath;                       

            var data = new Dictionary<string, string>()
                {
                    { "UserName", model.Email },
                    { "Password", model.Password },
                    { "Email", model.Email },
                    { "GardenOwnerName", model.GardenOwnerName },
                    { "PictureUrl", model.PictureUrl },
                    { "GardenName", model.GardenName },
                    { "GardenDescription", model.GardenDescription },
                    { "MainGarden", model.MainGarden },
                    { "SubGarden", model.SubGarden },
                    { "GardenLocation", model.GardenLocation }
                };

            using (var requestContent = new FormUrlEncodedContent(data))
            {
                var response = await _client.PostAsync("/API/Account/Register", requestContent); // era model aqui e n requestContent

                if (response.IsSuccessStatusCode)
                {
                    return View("Login");
                }
            }
            return View(model);
        }

        //GET: Account/Login
        public ActionResult Login()
        {
            return View();
        }

        //método que receberá o Post com os dados que recebemos desta página
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Login(LoginViewModel model)
        {
            if (ModelState.IsValid)
            {
                var data = new Dictionary<string, string>()
                {
                    { "grant_type", "password"},
                    { "userName", model.Email},
                    { "password", model.Password}
                };

                using (var requestContent = new FormUrlEncodedContent(data))
                {
                    var response = await _client.PostAsync("/Token", requestContent);

                    if(response.IsSuccessStatusCode)
                    {
                        var responseContent = await response.Content.ReadAsStringAsync();
                        var tokenData = JObject.Parse(responseContent);
                        _tokenHelper.AccessToken = tokenData["access_token"]; //this is sent to the session in TokenHelper.cs
                        //"access_token" is a pattern name, generated by the api
                        
                        return RedirectToAction("Index", "Home");
                    }
                    else
                    {
                        ModelState.AddModelError("", "");
                    }
                }
            }
            return View(model);
        }

        public async Task<ActionResult> LogOff()
        {
            _client.DefaultRequestHeaders.Add("Authorization", string.Format("Bearer {0}", _tokenHelper.AccessToken));

            HttpResponseMessage response = await _client.PostAsJsonAsync("/API/Account/Logout", "Authorization");

            if(response.IsSuccessStatusCode)
            {
                _client.DefaultRequestHeaders.Clear();

                JObject tokenData = null;

                _tokenHelper.AccessToken = tokenData;

                ViewBag.Message = "You logged out!! We look forward to see you soon :)";
                               
                return View("Login");
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        protected override void Dispose (bool disposing)
        {
            if(disposing && _client != null)
            {
                _client.Dispose();
                _client = null;
            }
            base.Dispose(disposing);
        }
    }
}